<?php
/* ********************************************************************************
* The content of this file is subject to the VTEAuthnet("License");
* You may not use this file except in compliance with the License
* The Initial Developer of the Original Code is VTExperts.com
* Portions created by VTExperts.com. are Copyright(C) VTExperts.com.
* All Rights Reserved.
* ****************************************************************************** */

require_once("includes/runtime/BaseModel.php");
require_once("modules/Vtiger/models/Record.php");
require_once("modules/Users/models/Record.php");
require_once("includes/runtime/Globals.php");
require_once("include/utils/utils.php");
require_once("includes/runtime/LanguageHandler.php");
require_once("includes/Loader.php");
require_once('modules/ANCustomers/libs/transactions.php');
require_once('modules/ANCustomers/libs/AuthnetHelper.php');

ini_set('display_errors','on'); error_reporting(E_ALL & ~E_WARNING & ~E_NOTICE & ~E_DEPRECATED & ~E_STRICT);   // DEBUGGING

global $adb, $VTIGER_BULK_SAVE_MODE, $current_user;

if (!$current_user) {
    $current_user = new Users();
    $current_user->id = 1;
    $current_user = $current_user->retrieve_entity_info($current_user->id, "Users");
}
if(!$adb){
    $adb=PearDatabase::getInstance();
}


echo '#########Start recurring Authorize.Net payment##########';
echo "\n";

//check module enable Authorize Integrate or disable
$authnetHelper = new AuthnetHelper();
$authnetStatus = $authnetHelper->isANEnable(true);
if($authnetStatus->status === false){
    echo $authnetStatus->message;
    echo "\n";
    exit();
}

//get payments from Vtiger
$query = "SELECT vtiger_payments.*
                FROM vtiger_payments
                INNER JOIN vtiger_crmentity ON vtiger_crmentity.crmid = vtiger_payments.paymentid
                WHERE vtiger_crmentity.deleted = 0 AND vtiger_payments.payment_status = '*Scheduled'
                  AND vtiger_payments.invoice IS NOT NULL AND vtiger_payments.invoice != '' 
                  AND vtiger_payments.date = DATE_FORMAT(NOW(), '%Y-%m-%d')";

$result = $adb->pquery($query, array());
if($adb->num_rows($result)){
    $anTransaction = new ANCustomerTransactions();
    $i = 1;
    while($row = $adb->fetchByAssoc($result)){
        if($i%5 == 0){
            sleep(1);
        }
        $payment_id = (int)$row['paymentid'];
        $invoice_id = (int)$row['invoice'];
        $account_id = (int)$row['organization'];
        if($account_id==0){
            $result0 = $adb->pquery("SELECT accountid FROM vtiger_invoice WHERE invoiceid = ? LIMIT 1", array($invoice_id));
            if($adb->num_rows($result0)){
                $account_id = $adb->query_result($result0, 0, 'accountid');
            }
        }
        $amount = floatval($row['amount_paid']);
        //get AN info
        if($account_id>0 && $invoice_id>0){
            $sql = "SELECT
                            DISTINCT vtiger_anpaymentprofile.an_id AS 'an_payment_profile_id',
                            vtiger_anpaymentprofile.anpaymentprofileid,
                            vtiger_ancustomers.customerprofileid AS 'an_customer_profile_id',
                            vtiger_ancustomers.ancustomersid,
                            vtiger_ancustomers.customershippingaddressid,
                            vtiger_anpaymentprofile.is_primary
                        FROM vtiger_anpaymentprofile
                        INNER JOIN vtiger_crmentity ON vtiger_crmentity.crmid = vtiger_anpaymentprofile.anpaymentprofileid
                        LEFT JOIN vtiger_ancustomers ON vtiger_ancustomers.ancustomersid = vtiger_anpaymentprofile.customer_profile_id
                        WHERE vtiger_crmentity.deleted = 0
                            AND vtiger_anpaymentprofile.an_id IS NOT NULL AND vtiger_anpaymentprofile.an_id != ''
                            AND vtiger_ancustomers.customerprofileid IS NOT NULL AND vtiger_ancustomers.customerprofileid != ''
                            AND vtiger_anpaymentprofile.account_id = ?
                        ORDER BY vtiger_anpaymentprofile.is_primary DESC, vtiger_crmentity.modifiedtime DESC";
            $result1 = $adb->pquery($sql, array($account_id));
            $an_info = array();
            if($adb->num_rows($result1)){
                $an_info_tmp = array();
                while($row1 = $adb->fetchByAssoc($result1)){
                    $an_info_tmp[] = $row1;
                    if($row['is_primary']==1){
                        $an_info = $row1;
                        break 1;
                    }
                }
                if(empty($an_info)){
                    $an_info = $an_info_tmp[0];
                }
            }
            if(!empty($an_info)){
                $an_customer_profile_id = $an_info['an_customer_profile_id'];
                $ancustomersid = $an_info['ancustomersid'];
                $an_payment_profile_id = $an_info['an_payment_profile_id'];
                $anpaymentprofileid = $an_info['anpaymentprofileid'];
                //create vtiger an_transaction then it will auto submit transaction to Authorize.Net via EventHandler function
                if($invoice_id > 0 && $account_id > 0 && $amount > 0 && !empty($an_customer_profile_id) && !empty($an_payment_profile_id)){
                    $recordModel = Vtiger_Record_Model::getCleanInstance('ANTransactions');
                    $data = $recordModel->getData();
                    $recordModel->set('mode', '');
                    $recordModel->set('invoice_id', $invoice_id);
                    $recordModel->set('payment_id', $payment_id);
                    $recordModel->set('an_profile_id', $ancustomersid);
                    $recordModel->set('an_payment_profile_id', $anpaymentprofileid);
                    $recordModel->set('amount', $amount);
                    //set action type for debug purpose
                    $recordModel->set('action_type', 'Cron');

                    $recordModel->save();
                    unset($recordModel);
                    //echo log
                    echo '- Processing payment: '.$payment_id. ' to paid $'.$amount;
                    echo 'Status: Success';
                    echo "\n";
                    $i++;
                }else{
                    echo '- Processing payment: '.$payment_id. ' to pay $'.$amount;
                    echo 'Status: Error';
                    echo "\n";
                    if(!$invoice_id){
                        echo '-- Has not invoice';
                        echo "\n";
                    }
                    if(!$account_id){
                        echo '-- Has not organization';
                        echo "\n";
                    }
                    if(!$an_customer_profile_id){
                        echo '-- Has not customer profile';
                        echo "\n";
                    }
                    if(!$an_payment_profile_id){
                        echo '-- Has not payment profile';
                        echo "\n";
                    }
                    echo "\n";
                }
            }else{
                echo '- Processing payment: '.$payment_id. ' to pay $'.$amount;
                echo 'Status: Error';
                echo "\n";
                echo '-- Has not customer profile or payment profile';
                echo "\n";
            }
        }else{
            echo '- Processing payment: '.$payment_id. ' to pay $'.$amount;
            echo 'Status: Error';
            echo "\n";
            echo '-- Has not invoice or organization';
            echo "\n";
        }

        flush();
    }
}
echo '#########End recurring Authorize.Net payment##########';
echo "\n";