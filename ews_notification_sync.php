<?phpinclude("includes/main/WebUI.php");ini_set('display_errors',false); error_reporting(0);$adb = PearDatabase::getInstance();    	$userid = $_REQUEST['userid'];$response = json_decode($_REQUEST['data'], true);	$events = new OmniCal_ExchangeEvent_Model();		$calendarEvents = $exchangeTasks = $ignoreItems = array();$is_subscribed = false;if(!$userid){		$subscriptionId = $response['ResponseMessages']['SendNotificationResponseMessage']['Notification']['SubscriptionId'];			$sub_result = $adb->pquery("select userid from vtiger_user_subscription where subscriptionid = ?",array($subscriptionId));			if($adb->num_rows($sub_result))		$userid = $adb->query_result($sub_result,0,'userid');}					$tablecolumns = $adb->getColumnNames('vtiger_user_subscription');if(!in_array('notification_time', $tablecolumns))	$adb->pquery("ALTER TABLE `vtiger_user_subscription` ADD `notification_time` DATETIME NULL DEFAULT NULL AFTER `subscribe_time`",array());$now = new DateTime('now', new DateTimeZone('America/Los_Angeles'));$notificationTime = $now->format('Y-m-d H:i:s');$adb->pquery("update vtiger_user_subscription set notification_time = ? where userid = ?",array($notificationTime, $userid ));		if($userid && !empty($response) && $response['ResponseMessages']['SendNotificationResponseMessage']['ResponseClass'] == 'Success'){				$logEvents = array();		if(		isset($response['ResponseMessages']['SendNotificationResponseMessage']['Notification']) && 		!empty($response['ResponseMessages']['SendNotificationResponseMessage']['Notification'])	){							$user_obj = CRMEntity::getInstance("Users");		$user_obj->id = $userid;		$user_obj->retrieve_entity_info($user_obj->id, "Users");		vglobal("current_user", $user_obj);				$user_name = getUserName($userid);				$events->SetImpersonation($user_name);				$is_subscribed = true;				$notifications = $response['ResponseMessages']['SendNotificationResponseMessage']['Notification'];						$folderIds = array();				$task_folder = $events->getExchangeFolderDetail("task");				if(!empty($task_folder) && isset($task_folder['Id']))			$folderIds['tasks'] = $task_folder['Id'];				$calendar_folder = $events->getExchangeFolderDetail("calendar");				if(!empty($calendar_folder) && isset($calendar_folder['Id']))			$folderIds['events'] = $calendar_folder['Id'];		if(isset($notifications['CreatedEvent']) && !empty($notifications['CreatedEvent'])){					$createdEvents = $notifications['CreatedEvent'];						if(isset($createdEvents['ItemId']) && !empty($createdEvents['ItemId']))				$createItem = $createdEvents['ItemId'];						if(isset($createdEvents['ParentFolderId']) && !empty($createdEvents['ParentFolderId']))				$parentFolder = $createdEvents['ParentFolderId'];							if(!empty($parentFolder) && !empty($createItem)){								$parentFolderId = $parentFolder['Id'];								if(in_array($parentFolderId, $folderIds)){										$index = array_search($parentFolderId, $folderIds);										if($index)						$logEvents[$index]['create'][$createItem['Id']] = $createItem['ChangeKey'];				}			}		} 				if(isset($notifications['ModifiedEvent']) && !empty($notifications['ModifiedEvent'])){					$modifiedEvents = $notifications['ModifiedEvent'];						foreach($modifiedEvents as $modifiedEvent){								if(is_array($modifiedEvent) && !empty($modifiedEvent)){										if(						isset($modifiedEvent['ItemId']) && !empty($modifiedEvent['ItemId']) &&						isset($modifiedEvent['ParentFolderId']) && !empty($modifiedEvent['ParentFolderId'])					){												$modifyItem = $modifiedEvent['ItemId'];												$moditemid = $modifyItem['Id'];												$parentFolderId = $modifiedEvent['ParentFolderId']['Id'];																						if(in_array($parentFolderId, $folderIds)){												$index = array_search($parentFolderId, $folderIds);												if($index){																if($index == 'tasks')									$record = Task_ExchangeTasks_Model::DoesTaskExist($moditemid);								else									$record = OmniCal_ExchangeBridge_Model::DoesItemExist($moditemid);																if($record){																	$logEvents[$index]['update'][$moditemid] = $modifyItem['ChangeKey'];																} else {																	$logEvents[$index]['create'][$moditemid] = $modifyItem['ChangeKey'];								}							}						}					}				}			}		} 				if(isset($notifications['MovedEvent']) && !empty($notifications['MovedEvent'])){					$movedEvents = $notifications['MovedEvent'];						if(				isset($movedEvents['ParentFolderId']) && !empty($movedEvents['ParentFolderId']) &&				isset($movedEvents['OldItemId']) && !empty($movedEvents['OldItemId'])			){				$oldItemInfo = $movedEvents['OldItemId'];				$parentFolderInfo = $movedEvents['ParentFolderId'];								$oldParentFolderInfo = $movedEvents['OldParentFolderId'];								$deletedFolderInfo = $events->getExchangeFolderDetail();				if(!empty($deletedFolderInfo) && isset($deletedFolderInfo['Id'])){										$deletedFolderId = $deletedFolderInfo['Id'];							if($deletedFolderId != '' && $deletedFolderId == $parentFolderInfo['Id']){												$ignoreItems[] = $oldItemInfo['Id'];								  						$oldParentFolderId = $oldParentFolderInfo['Id'];												$event_type = array_search($oldParentFolderId, $folderIds);											if($event_type == 'tasks')							$record = Task_ExchangeTasks_Model::DoesTaskExist($oldItemInfo['Id']);						else							$record = OmniCal_ExchangeBridge_Model::DoesItemExist($oldItemInfo['Id']);												if($record){								$query = "UPDATE vtiger_crmentity SET deleted = 1 WHERE crmid = ?";							$adb->pquery($query, array($record));														$activityCFResult = $adb->pquery("select vtiger_activity.activityid from vtiger_activity							inner join vtiger_activitycf on vtiger_activitycf.activityid = vtiger_activity.activityid							inner join vtiger_crmentity on vtiger_crmentity.crmid = vtiger_activitycf.activityid and vtiger_crmentity.deleted = 0							where vtiger_activity.parent_activity_id = ?",array($record));														if($adb->num_rows($activityCFResult) > 0){																$crmids = array();																while($activity = $adb->fetchByAssoc($activityCFResult)){									$crmids[] = $activity['activityid'];								}													if(!empty($crmids))									$adb->pquery("update vtiger_crmentity set vtiger_crmentity.deleted = 1 where crmid in (".generateQuestionMarks($crmids).")",array($crmids));							}						}					}				}			}		}		if(!empty($logEvents)){						foreach($logEvents as $name => $items){							if(empty($items)) continue;								$ews_items = array();								foreach($items as $action => $item_info){										if(empty($item_info)) continue;										$ews_items[$action] = array();										foreach($item_info as $item_id => $item_change_info){												if(in_array($item_id, $ignoreItems)) continue;												$ews_items[$action][] = array(							'id'=>$item_id,							'changekey'=>$item_change_info						);					}				}								if($name == 'tasks')					$exchangeTasks = $ews_items;				else if($name == 'events')					$calendarEvents = $ews_items;			}		}		if(!empty($calendarEvents)){			try {				$events->AutoCreateUpdateDeleteCRMWithEventInfo($calendarEvents);			} catch (Exception $e) {				echo $e->getMessage();				exit;			} 		}				if(!empty($exchangeTasks)){			try {								$tasks = new Task_ExchangeTasks_Model();								$tasks->SetImpersonation($user_name);								$tasks->AutoCreateUpdateDeleteCRMWithTaskInfo($exchangeTasks);											} catch (Exception $e) {				echo $e->getMessage();				exit;			} 		}				echo json_encode(array('success' => true, 'message' => 'Sync Successfully.'));			}}?>