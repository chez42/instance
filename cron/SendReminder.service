<?php
////////////////////////////////////////////////////
// PHPMailer - PHP email class
//
// Class for sending email using either
// sendmail, PHP mail(), or SMTP.  Methods are
// based upon the standard AspEmail(tm) classes.
//
// Copyright (C) 2001 - 2003  Brent R. Matzelle
//
// License: LGPL, see LICENSE
////////////////////////////////////////////////////

/**
 * PHPMailer - PHP email transport class
 * @package PHPMailer
 * @author Brent R. Matzelle
 * @copyright 2001 - 2003 Brent R. Matzelle
 */


//file modified by richie

require_once('include/utils/utils.php');
require_once("modules/Emails/class.phpmailer.php");
require_once("modules/Emails/mail.php");
require_once('include/logging.php');
require_once("config.php");

$current_user = Users::getActiveAdminUser();
// Set the default sender email id
global $HELPDESK_SUPPORT_EMAIL_ID;
$from = $HELPDESK_SUPPORT_EMAIL_ID;
if(empty($from)) {
    // default configuration is empty?
    $from = "reminders@localserver.com";
}

// Get the list of activity for which reminder needs to be sent

global $adb;
global $log;
global $site_URL;
$log =& LoggerManager::getLogger('SendReminder');
$log->debug(" invoked SendReminder ");

//modified query for recurring events -Jag
$query="SELECT vtiger_crmentity.crmid, vtiger_crmentity.description, vtiger_crmentity.smownerid, vtiger_seactivityrel.crmid AS setype,vtiger_activity.*,vtiger_activity_reminder.reminder_time,
	vtiger_activity_reminder.reminder_sent,vtiger_activity_reminder.recurringid FROM vtiger_activity
	INNER JOIN vtiger_crmentity ON vtiger_crmentity.crmid=vtiger_activity.activityid
	INNER JOIN vtiger_activity_reminder ON vtiger_activity.activityid=vtiger_activity_reminder.activity_id
	LEFT OUTER JOIN vtiger_seactivityrel ON vtiger_seactivityrel.activityid = vtiger_activity.activityid
	WHERE DATE_FORMAT(vtiger_activity.date_start,'%Y-%m-%d, %H:%i:%s') >= '".date('Y-m-d')."' AND vtiger_crmentity.crmid != 0 AND
	(vtiger_activity.eventstatus is NULL OR vtiger_activity.eventstatus NOT IN ('Held','Cancelled'))
	AND (vtiger_activity.status is NULL OR vtiger_activity.status NOT IN ('Completed', 'Deferred', 'Cancelled'))
	AND vtiger_activity_reminder.reminder_sent = 0 AND vtiger_activity_reminder.reminder_time != 0
	GROUP BY vtiger_activity.activityid";
$result = $adb->pquery($query, array());

if($adb->num_rows($result) >= 1)
{
    //To fetch reminder frequency from cron tasks
    $reminderFrequencyQuery = 'SELECT frequency FROM vtiger_cron_task WHERE name = "SendReminder" AND handler_file = "cron/SendReminder.service"';
    $reminderResult = $adb->pquery($reminderFrequencyQuery, array());
    $reminderFrequency = $adb->query_result($reminderResult,0,'frequency');
   
    
    while($result_set = $adb->fetch_array($result))
    {
        $date_start = $result_set['date_start'];
        $time_start = $result_set['time_start'];
        $reminder_time = $result_set['reminder_time']*60;
        $date = new DateTimeField( null );
        $userFormatedString = $date->getDisplayDate();
        $timeFormatedString = $date->getDisplayTime();
        $dBFomatedDate = DateTimeField::convertToDBFormat($userFormatedString);
        $curr_time = strtotime($dBFomatedDate." ". $timeFormatedString);
        $activity_id = $result_set['activityid'];
        $to_addr='';
        
        //code included for recurring events by jaguar starts
        $recur_id = $result_set['recurringid'];
        $current_date=date('Y-m-d');
        if($recur_id == 0)
        {
            $date_start = $result_set['date_start'];
        }
        else
        {
            $date_start = $result_set['recurringdate'];
        }
        //code included for recurring events by jaguar ends
        $date = new DateTimeField("$date_start $time_start");
        $userFormatedString = $date->getDisplayDate();
        $timeFormatedString = $date->getDisplayTime();
        $dBFomatedDate = DateTimeField::convertToDBFormat($userFormatedString);
        $activity_time = strtotime($dBFomatedDate.' '.$timeFormatedString);
        $differenceOfActivityTimeAndCurrentTime = ($activity_time - $curr_time);
        
        if (($differenceOfActivityTimeAndCurrentTime > 0) && (($differenceOfActivityTimeAndCurrentTime <= $reminder_time) || ($differenceOfActivityTimeAndCurrentTime <= $reminderFrequency)))
        {
            echo"<pre>";print_r($reminderFrequency);echo"</pre>";
            $log->debug(" InSide REMINDER");
            echo"<pre>";print_r($result_set);echo"</pre>";
            if(count($to_addr) >=1)
            {
               
                $actRecordModel = Vtiger_Record_Model::getInstanceById($activity_id);
                $actRecordModel->set('mode','edit');
                $actRecordModel->set('trigger_reminder',1);
                $actRecordModel->save();
                
                $upd_query = "UPDATE vtiger_activity_reminder SET reminder_sent = ? ";
                $upd_params = array(1);
                
                $upd_query .= " WHERE activity_id = ? ";
                array_push($upd_params, $activity_id);
                
                if($recur_id!=0)
                {
                    $upd_query.=" and recurringid =?";
                    array_push($upd_params, $recur_id);
                }
                
                $adb->pquery($upd_query, $upd_params);
                
            }
        }
    }
}
   
?>
