<?php
include_once 'modules/DocuSign/vendor/autoload.php';

global $adb,$root_directory, $upload_badext;

$config = new DocuSign\eSign\Configuration();

if(DocuSign_Config_Connector::$server == 'Sandbox'){
    $config->setHost('https://demo.docusign.net/restapi');
    $OAuth = new \DocuSign\eSign\Client\Auth\OAuth();
    $OAuth->setBasePath($config->getHost());
    $api_client = new \DocuSign\eSign\Client\ApiClient($config,$OAuth);
}
if(DocuSign_Config_Connector::$server == 'Production')
    $api_client = new \DocuSign\eSign\Client\ApiClient($config);
 

$users = $adb->pquery("SELECT * FROM vtiger_users WHERE status='Active'");

if($adb->num_rows($users)){
    
    for($u=0;$u<$adb->num_rows($users);$u++){
        
        $user = CRMEntity::getInstance("Users");
        $user->id = $adb->query_result($users, $u, 'id');
        $user->retrieve_entity_info($user->id, "Users");
        vglobal("current_user", $user);
        
        $docuSign_settings_result = $adb->pquery("SELECT * FROM vtiger_document_designer_configuration WHERE
        vtiger_document_designer_configuration.userid = ? and ( access_token is not NULL and access_token != '' )",array($current_user->id));
            
        if($adb->num_rows($docuSign_settings_result)){
            
            $token_data = $adb->query_result_rowdata($docuSign_settings_result, 0);
            
            $token = array();
            
            $token['token_type'] = $token_data['token_type'];
            
            $token['expires_in'] = $token_data['expires_in'];
            
            $token['access_token'] = $token_data['access_token'];
            
            $token['refresh_token'] = $token_data['refresh_token'];
            
            $userDetail = $api_client->getUserInfo($token['access_token']);
            
            $accountId = $userDetail[0]['accounts'][0]['account_id'];
            
            $current_time = strtotime(date("Y-m-d H:i:s"));
            
            if(!$accountId || $token['expires_in'] < $current_time){
                
                $refreshTokenData = $api_client->generateRefreshAccessToken(DocuSign_Config_Connector::$client_id, DocuSign_Config_Connector::$client_secret, $token['refresh_token']);
                
                $token['access_token'] = $refreshTokenData[0]['access_token'];
                $token['refresh_token'] = $refreshTokenData[0]['refresh_token'];
                $token['token_type'] = $refreshTokenData[0]['token_type'];
                $token['expires_in'] = $refreshTokenData[0]['expires_in'];
                
                saveDocuSignToken($refreshTokenData,$current_user->id);
                
				$userDetail = $api_client->getUserInfo($token['access_token']);
            
				$accountId = $userDetail[0]['accounts'][0]['account_id'];
            }
        }
        
		if($token['access_token']){
			$config->addDefaultHeader('Authorization', 'Bearer ' . $token['access_token']);
			
			if(DocuSign_Config_Connector::$server == 'Sandbox')
				$api_client = new \DocuSign\eSign\Client\ApiClient($config, $OAuth);
			if(DocuSign_Config_Connector::$server == 'Production')
				$api_client = new \DocuSign\eSign\Client\ApiClient($config);
				
				
			$envelopeApi = new DocuSign\eSign\Api\EnvelopesApi($api_client);
			
			$contactQuery = $adb->pquery("SELECT contactid, userid FROM vtiger_sync_docusign_records GROUP BY contactid, userid");
			
			if($adb->num_rows($contactQuery)){
				
				for($c=0;$c<$adb->num_rows($contactQuery);$c++){
					$envelopeIds = array();
					$contactId = $adb->query_result($contactQuery, $c, 'contactid');
					$userId = $adb->query_result($contactQuery , $c, 'userid');
					
					$envelopQuery = $adb->pquery("SELECT envelopeid FROM vtiger_sync_docusign_records WHERE contactid = ? AND userid = ?",
						array($contactId, $userId));
					
					if($adb->num_rows($envelopQuery)){
						for($e=0;$e<$adb->num_rows($envelopQuery);$e++){
							$envelopeIds[] = $adb->query_result($envelopQuery, $e, 'envelopeid');
						}
					}
					
					foreach($envelopeIds as $envelopeId){
						$docIds = array();
						$options = new DocuSign\eSign\Api\EnvelopesApi\ListStatusChangesOptions();
						$options->setStatus('completed');
						$options->setEnvelopeIds(array($envelopeId));
						$results = $envelopeApi->listStatusChanges($accountId, $options);
						
						if(!empty($results['envelopes'])){
							//$results = $envelopeApi->getEnvelope($accountId, $envelopeId);
							$documents = $envelopeApi->listDocuments($accountId, $envelopeId);
							
							foreach ($documents['envelope_documents'] as $item) {
								$docIds[] = $item['document_id'];
							}
							
							foreach($docIds as $docId){
								
								if($docId == 'certificate')
									continue;
									
								$temp_file = $envelopeApi->getDocument($accountId, $docId, $envelopeId);
								
								$doc_item = false;
								foreach ($documents['envelope_documents'] as $item) {
									if ($item['document_id'] == $docId) {
										$doc_item = $item;
										break;
									}
								}
								
								$doc_name = $doc_item['name'];
								$has_pdf_suffix = strtoupper(substr($doc_name, -4)) == '.PDF';
								$pdf_file = $has_pdf_suffix;
								
								if ($doc_item["type"] == "content" || ($doc_item["type"] == "summary" && ! $has_pdf_suffix)) {
									$doc_name = str_replace(array('.', ' '),'',$doc_name);
									$doc_name .= ".pdf";
									$pdf_file = true;
								}
								
								if ($doc_item["type"] == "zip") {
									$doc_name = str_replace(array('.', ' '),'',$doc_name);
									$doc_name .= ".zip";
								}
								
								if ($pdf_file) {
									$mimetype = 'application/pdf';
								} elseif ($doc_item["type"] == 'zip') {
									$mimetype = 'application/zip';
								} else {
									$mimetype = 'application/octet-stream';
								}
								
								$title = $doc_name;
								$filelocationtype = 'I';
								$filename = $doc_name;
								
								$filecontents = base64_encode(file_get_contents($temp_file->getPathname()));
								
								$upload_filepath = decideFilePath();
								
								$attachmentid = $adb->getUniqueID("vtiger_crmentity");
								
								$filename = sanitizeUploadFileName($filename, $upload_badext);
								$new_filename = $attachmentid.'_'.$filename;
								
								$data = base64_decode($filecontents);
								$description = 'Docusign Document Attachment';
								
								$handle = @fopen($upload_filepath.$new_filename,'w');
								fputs($handle, $data);
								fclose($handle);
								
								$date_var = $adb->formatDate(date('Y-m-d H:i:s'), true);
								
								$crmquery = "insert into vtiger_crmentity (crmid,setype,description,createdtime) values(?,?,?,?)";
								$crmresult = $adb->pquery($crmquery, array($attachmentid, 'Documents Attachment', $description, $date_var));
								
								$attachmentquery = "insert into vtiger_attachments(attachmentsid,name,description,type,path) values(?,?,?,?,?)";
								$attachmentreulst = $adb->pquery($attachmentquery, array($attachmentid, $filename, $description, $mimetype, $upload_filepath));
								
								$query = "SELECT * FROM vtiger_documentfolder inner join vtiger_crmentity on
								vtiger_crmentity.crmid = vtiger_documentfolder.documentfolderid
								WHERE is_default=1 and deleted=0";
								
								$result = $adb->pquery($query, array());
								
								if($adb->num_rows($result)){
									$doc_fol_id = $adb->query_result($result,0,'documentfolderid');
								}
								
								$focus = CRMEntity::getInstance('Documents');
								$focus->column_fields['notes_title'] = $title;
								$focus->column_fields['filename'] = $filename;
								$focus->column_fields['filetype'] = $mimetype;
								$focus->column_fields['filelocationtype'] = $filelocationtype;
								$focus->column_fields['assigned_user_id'] = $userId;
								$focus->column_fields['filestatus'] = 1;
								$focus->column_fields['contactid'] = $contactId;
								$focus->column_fields['related_to'] = $contactId;
								
								if($doc_fol_id)
									$focus->column_fields['doc_folder_id'] = $doc_fol_id;
								
								$focus->save('Documents');
								
								if($filelocationtype == "I" && $attachmentid > 0){
									$related_doc = 'insert into vtiger_seattachmentsrel values (?,?)';
									$res = $adb->pquery($related_doc,array($focus->id,$attachmentid));
								}
								
								$doc = 'insert into vtiger_senotesrel values(?,?)';
								$res = $adb->pquery($doc,array($contactId, $focus->id));
								
								$adb->pquery("DELETE FROM vtiger_sync_docusign_records WHERE envelopeid = ?",array($envelopeId));
							}
						}
					}
				}
			}
		}
	}
}

function saveDocuSignToken($token_data, $user_id){
    
    global $adb, $current_user;
    
    $access_token = $token_data[0]['access_token'];
    $refresh_token = $token_data[0]['refresh_token'];
    $token_type = $token_data[0]['token_type'];
    $expires_in = $token_data[0]['expires_in'];
    
    $current_user_id = $user_id;
    
    $result = $adb->pquery('SELECT * FROM vtiger_document_designer_configuration WHERE userid = ?',array($current_user_id));
    
    if($adb->num_rows($result)){
        
        $adb->pquery("update vtiger_document_designer_configuration set access_token = ?,
        refresh_token = ?, token_type = ?, expires_in = ? where userid = ?",
            array($access_token, $refresh_token, $token_type, $expires_in, $current_user_id));
        
    } else{
        
        $adb->pquery("insert into vtiger_document_designer_configuration(userid, access_token,
        refresh_token, token_type, expires_in) values(?,?,?,?,?)",
            array($current_user_id, $access_token, $refresh_token, $token_type, $expires_in));
        
    }
    
}
