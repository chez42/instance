<?php
require_once('modules/ModSecurities/actions/ConvertCustodian.php');
require_once('modules/Transactions/actions/ConvertCustodian.php');
require_once('modules/PositionInformation/actions/ConvertCustodian.php');
require_once('modules/PortfolioInformation/actions/ConvertCustodian.php');

$date = date("Y-m-d", strtotime("today -1 Weekday"));//Determine the date we will be using automatically
$custodian = "td";//Set the custodian
$newonly = 1;

global $adb;
$query = "INSERT INTO vtiger_cloud_updates (note, time) VALUES (?, NOW())";

$note = "Balances Section Start {$custodian}";
$adb->pquery($query, array($note));
$note = "Writing {$custodian} Balances To Cloud";
$adb->pquery($query, array($note));
    $x = 1;
    $increment = 2000;
    $trade = new Trading_Ameritrade_Model();
    $tmp = $trade->GetBalances("https://veoapi.advisorservices.com/InstitutionalAPIv2/api", null, null, 1, 1);
    $max = $tmp['model']['getBalancesJson']['responseInfo']['totalSize'];
    while($x <= $max){
        PortfolioInformation_ConvertCustodian_Model::WriteBalancesToCloud($custodian, null, null, $x, $x+$increment);
        $x+=$increment;
    }
    PortfolioInformation_ConvertCustodian_Model::UpdatePortfolioValuesTD($date);
$note = "Balances Section Finished {$custodian}";
$adb->pquery($query, array($note));

PortfolioInformation_Module_Model::UpdatePortfolioTDInfo();
PortfolioInformation_Module_Model::UpdatePortfolioTypeTDOnly();

/*
$note = "Entering New Securities {$custodian}\r\n";
$adb->pquery($query, array($note));
    ModSecurities_ConvertCustodian_Model::ConvertCustodian($custodian, $date, "=");
$note = "Entering Update Securities {$custodian}\r\n";
$adb->pquery($query, array($note));

$note = "Updating {$custodian} Securities\r\n";
$adb->pquery($query, array($note));
    ModSecurities_ConvertCustodian_Model::UpdateSecurityFieldsTD(null, true);
$note = "Finished Updating Securities {$custodian}\r\n";
$adb->pquery($query, array($note));

$note = "Positions Section Start {$custodian}";
$adb->pquery($query, array($note));
#Get New Positions Then Update Positions
$pos = new PositionInformation_ConvertCustodian_Action();
$posR = new Vtiger_Request(array());
$posR->set('custodian', $custodian);
$posR->set('date', $date);
$posR->set('convert_table', "new_positions");
$note = "Getting New Positions {$custodian}\r\n";
$adb->pquery($query, array($note));
$pos->process($posR);
$note = "New Positions Pulled {$custodian}\r\n";
$adb->pquery($query, array($note));

$note = "Updating Positions {$custodian}\r\n";
$adb->pquery($query, array($note));
    PositionInformation_ConvertCustodian_Model::UpdatePositionInformationTD($date);
$note = "Finished Updating Positions {$custodian}\r\n";
$adb->pquery($query, array($note));

/*
$note = "Securities Section Start {$custodian}";
$adb->pquery($query, array($note));
#Get New Securities Then Update Securities
echo "Entering New Securities {$custodian}\r\n";
ModSecurities_ConvertCustodian_Model::ConvertCustodian($custodian, $date, "=");
echo "Entering Update Securities\r\n";
ModSecurities_ConvertCustodian_Model::UpdateSecurityPrices($custodian, $date);
echo "Securities Section Finished\r\n";
$note = "Securities Section Finished {$custodian}";
$adb->pquery($query, array($note));


$note = "Positions Section Start {$custodian}";
$adb->pquery($query, array($note));
#Get New Positions Then Update Positions
$pos = new PositionInformation_ConvertCustodian_Action();
$posR = new Vtiger_Request(array());
$posR->set('custodian', $custodian);
$posR->set('date', $date);
$posR->set('convert_table', "new_positions");
echo "Getting New Positions {$custodian}\r\n";
$pos->process($posR);
$posR->set('convert_table', 'update_positions');
echo "Updating Positions {$custodian}\r\n";
$pos->process($posR);
$note = "Positions Section Finished {$custodian}";
$adb->pquery($query, array($note));


$note = "Updating Balances {$custodian}";
$adb->pquery($query, array($note));
PortfolioInformation_ConvertCustodian_Model::WriteBalancesToCloud($custodian, null, $date);
$note = "Balances Finished {$custodian}";
$adb->pquery($query, array($note));


$note = "Portfolios Section Start {$custodian}";
$adb->pquery($query, array($note));
$por = new PortfolioInformation_ConvertCustodian_Action();
$posR->set('convert_table', 'portfolios');
echo "Getting New Portfolios\r\n";
$por->process($posR);
echo "Calculating Portfolio Values\r\n";
$posR->set('convert_table', 'calculate_portfolios');
$por->process($posR);
$note = "Portfolios Section Finished {$custodian}";
$adb->pquery($query, array($note));




/*
global $adb;
$query = "INSERT INTO vtiger_cloud_updates (note, time) VALUES (?, NOW())";

//DISABLED... REMOVE THIS WHEN FINALLY ENABLED!
#$note = "Transactions Section Start {$custodian}";
#$adb->pquery($query, array($note));
#First Pull Transactions
#echo "Entering Transactions Pull {$custodian}\r\n";
#Transactions_ConvertCustodian_Model::ConvertCustodian($custodian, $date, ">=", $newonly);
#echo "Finished Transactions Pull\r\n";
#$note = "Transactions Section Finished {$custodian}";
#$adb->pquery($query, array($note));

$note = "Balances Section Start {$custodian}";
$adb->pquery($query, array($note));
PortfolioInformation_ConvertCustodian_Model::WriteBalancesToCloud($custodian, null, $date);
$note = "Balances Section Finished {$custodian}";
$adb->pquery($query, array($note));

$note = "Securities Section Start {$custodian}";
$adb->pquery($query, array($note));
#Get New Securities Then Update Securities
echo "Entering New Securities {$custodian}\r\n";
ModSecurities_ConvertCustodian_Model::ConvertCustodian($custodian, $date, "=");
echo "Entering Update Securities\r\n";
ModSecurities_ConvertCustodian_Model::UpdateSecurityPrices($custodian, $date);
echo "Securities Section Finished\r\n";
$note = "Securities Section Finished {$custodian}";
$adb->pquery($query, array($note));


$note = "Positions Section Start {$custodian}";
$adb->pquery($query, array($note));
#Get New Positions Then Update Positions
$pos = new PositionInformation_ConvertCustodian_Action();
$posR = new Vtiger_Request(array());
$posR->set('custodian', $custodian);
$posR->set('date', $date);
$posR->set('convert_table', "new_positions");
echo "Getting New Positions {$custodian}\r\n";
$pos->process($posR);
$posR->set('convert_table', 'update_positions');
echo "Updating Positions {$custodian}\r\n";
$pos->process($posR);
$note = "Positions Section Finished {$custodian}";
$adb->pquery($query, array($note));


$note = "Updating Balances {$custodian}";
$adb->pquery($query, array($note));
PortfolioInformation_ConvertCustodian_Model::WriteBalancesToCloud($custodian, null, $date);
$note = "Balances Finished {$custodian}";
$adb->pquery($query, array($note));


$note = "Portfolios Section Start {$custodian}";
$adb->pquery($query, array($note));
$por = new PortfolioInformation_ConvertCustodian_Action();
$posR->set('convert_table', 'portfolios');
echo "Getting New Portfolios\r\n";
$por->process($posR);
echo "Calculating Portfolio Values\r\n";
$posR->set('convert_table', 'calculate_portfolios');
$por->process($posR);
$note = "Portfolios Section Finished {$custodian}";
$adb->pquery($query, array($note));
*/

?>